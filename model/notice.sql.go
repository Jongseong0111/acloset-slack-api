// Code generated by sqlc. DO NOT EDIT.
// source: notice.sql

package model

import (
	"context"

	"time"
)

const countAllClothes = `-- name: CountAllClothes :one
SELECT count(nco.id)
FROM nc_core_closet nco
WHERE nco.del_flag=false AND nco.use_flag=true
`

func (q *Queries) CountAllClothes(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllClothes)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAllOutfits = `-- name: CountAllOutfits :one
SELECT count(ncs.id)
FROM nc_core_style ncs
WHERE ncs.del_flag=false AND ncs.use_flag=true
`

func (q *Queries) CountAllOutfits(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllOutfits)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAllPosts = `-- name: CountAllPosts :one
SELECT count(post.post_id)
FROM post
WHERE post.is_delete=false
`

func (q *Queries) CountAllPosts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllPosts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAllSchedules = `-- name: CountAllSchedules :one
SELECT count(nus.id)
FROM nc_usr_schedule nus
WHERE nus.del_flag=false AND nus.use_flag=true
`

func (q *Queries) CountAllSchedules(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllSchedules)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAllUsers = `-- name: CountAllUsers :one
SELECT count(nua.id)
FROM nc_usr_account nua
WHERE nua.del_flag=false
`

func (q *Queries) CountAllUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRecentRegisteredClothes = `-- name: CountRecentRegisteredClothes :one
SELECT count(nco.id)
FROM nc_core_closet nco
WHERE nco.del_flag=false AND nco.use_flag=true AND nco.create_dt>$1
`

func (q *Queries) CountRecentRegisteredClothes(ctx context.Context, createDt *time.Time) (int64, error) {
	row := q.db.QueryRow(ctx, countRecentRegisteredClothes, createDt)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRecentRegisteredOutfits = `-- name: CountRecentRegisteredOutfits :one

SELECT count(ncs.id)
FROM nc_core_style ncs
WHERE ncs.del_flag=false AND ncs.use_flag=true AND ncs.create_dt>$1
`

func (q *Queries) CountRecentRegisteredOutfits(ctx context.Context, createDt *time.Time) (int64, error) {
	row := q.db.QueryRow(ctx, countRecentRegisteredOutfits, createDt)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRecentRegisteredPosts = `-- name: CountRecentRegisteredPosts :one
SELECT count(post.post_id)
FROM post
WHERE post.is_delete=false AND post.create_date>$1
`

func (q *Queries) CountRecentRegisteredPosts(ctx context.Context, createDate *time.Time) (int64, error) {
	row := q.db.QueryRow(ctx, countRecentRegisteredPosts, createDate)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRecentRegisteredUsers = `-- name: CountRecentRegisteredUsers :one
SELECT count(nua.id)
FROM nc_usr_account nua
WHERE nua.del_flag=false AND nua.create_dt>$1
`

func (q *Queries) CountRecentRegisteredUsers(ctx context.Context, createDt *time.Time) (int64, error) {
	row := q.db.QueryRow(ctx, countRecentRegisteredUsers, createDt)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRecentSchedules = `-- name: CountRecentSchedules :one
SELECT count(nus.id)
FROM nc_usr_schedule nus
WHERE nus.del_flag=false AND nus.use_flag=true AND nus.create_dt>$1
`

func (q *Queries) CountRecentSchedules(ctx context.Context, createDt *time.Time) (int64, error) {
	row := q.db.QueryRow(ctx, countRecentSchedules, createDt)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUserLog = `-- name: CreateUserLog :exec
INSERT INTO statistic_log (create_date, user_count, clothes_count, outfit_count, post_count, calender_count)
VALUES (now() + interval '9 hour', $1, $2, $3, $4, $5)
`

type CreateUserLogParams struct {
	UserCount     *int `json:"userCount"`
	ClothesCount  *int `json:"clothesCount"`
	OutfitCount   *int `json:"outfitCount"`
	PostCount     *int `json:"postCount"`
	CalenderCount *int `json:"calenderCount"`
}

func (q *Queries) CreateUserLog(ctx context.Context, arg CreateUserLogParams) error {
	_, err := q.db.Exec(ctx, createUserLog,
		arg.UserCount,
		arg.ClothesCount,
		arg.OutfitCount,
		arg.PostCount,
		arg.CalenderCount,
	)
	return err
}
